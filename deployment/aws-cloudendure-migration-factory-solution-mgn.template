AWSTemplateFormatVersion: "2010-09-09"
Description: "(%%SOLUTION_ID%%-mgn) - The AWS CloudFormation template for deployment of the AWS CloudEndure Migration Factory Solution"

Parameters:
  CodeBucket: # Upload Code in this bucket
    Description: S3 bucket where all the code reside
    Type: String

  KeyPrefix:
    Description: S3 key Prefix where all the code reside
    Type: String

  Application:
    Type: String
    Description: Application name, used to name all AWS resources.
    Default: migration-factory
    AllowedPattern: "[-a-z0-9]*"
    ConstraintDescription: Application parameter must be all lower case characters

  Environment:
    Type: String
    Description: Environment name, used to name all AWS resources (.i.e dev, test, prod)
    Default: test
    AllowedPattern: "[-a-z0-9]*"
    ConstraintDescription: Application parameter must be all lower case characters

  ServiceAccountEmail:
    Type: String
    Description: MF Service Account email address

  CognitoUserPool:
    Type: String
    Description: Cognito User Pool Id

  CognitoUserPoolArn:
    Type: String
    Description: Cognito User Pool Arn

  CognitoAdminGroup:
    Type: String
    Description: Cognito Group name

  ToolsAPI:
    Type: String
    Description: Tools Rest API Id

  ToolsAPIRootId:
    Type: String
    Description: Tools Rest API RootResource Id

  ToolsAuthorizer:
    Type: String
    Description: Tools Rest API Authorizer Id

  ServerDynamoTableArn:
    Type: String
    Description: Servers DynamoDB Table Arn

  AppDynamoTableArn:
    Type: String
    Description: Apps DynamoDB Table Arn

  AnonymousUsageData:
    Type: String
    Description: Anonymous Usage Data

  solutionUUID:
    Type: String
    Description: AWS Solution UUID

Resources:
  ## MGN API
  APIResourceMGN:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ToolsAPI
      ParentId: !Ref ToolsAPIRootId
      PathPart: "mgn"

  MGNAPIDeploy:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIMethodMGNOPTIONS
      - APIMethodMGNPost
    Properties:
      RestApiId: !Ref ToolsAPI
      StageName: prod
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W68
            reason: "As this is for internal use only tool, and very low number of API calls, no usage plan is required"
          - id: W45
            reason: "StageDescription cannot be specified when stage referenced by StageName already exists"

  APIMethodMGNOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ToolsAPI
      ResourceId: !Ref APIResourceMGN
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            'application/json': 'Empty'
          ResponseParameters:
            'method.response.header.Access-Control-Allow-Origin': false
            'method.response.header.Access-Control-Allow-Methods': false
            'method.response.header.Access-Control-Allow-Headers': false
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Origin": "'*'"
              "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              'application/json': ''
        RequestTemplates:
          "application/json": "{\"statusCode\": 200}"

  APIMethodMGNPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ToolsAPI
      ResourceId: !Ref APIResourceMGN
      HttpMethod: "POST"
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref ToolsAuthorizer
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            'application/json': 'Empty'
          ResponseParameters:
            'method.response.header.Access-Control-Allow-Origin': false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Origin": "'*'"
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionMGN.Arn}/invocations'

  ## IAM Role for Application Migration Service Lambda
  MGNLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Application}-${Environment}-MGNLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub ${Application}-${Environment}-MGNLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DescribeTable'
                Resource:
                  - !Join ['', [!Ref ServerDynamoTableArn, '*']]
                  - !Join ['', [!Ref AppDynamoTableArn, '*']]
              -
                Effect: Allow
                Action:
                - 'iam:PassRole'
                - 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/Factory*'
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              -
                Effect: Allow
                Action:
                  - s3:HeadBucket
                  - s3:HeadObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${CodeBucket}"
              -
                Effect: Allow
                Action:
                  - s3:HeadBucket
                  - s3:HeadObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${CodeBucket}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The resources ARN is unknown, because it is based on user's input"
          - id: F38
            reason: "The resources ARN is unknown, because it is based on user's input"
          - id: W28
            reason: "Replacement of this resource is not required, and explicit name of this resource is easy for user to identify"

  MGNExeServerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Application}-${Environment}-MGN-ExeServerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Replacement of this resource is not required, and explicit name of this resource is easy for user to identify"

  MGNExeServerPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub ${Application}-${Environment}-MGN-ExeServerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - 'iam:PassRole'
              - 'sts:AssumeRole'
            Resource: 'arn:aws:iam::*:role/Factory*'
          -
            Effect: Allow
            Action:
              - 'secretsmanager:DescribeSecret'
              - 'secretsmanager:GetSecretValue'
            Resource: !Sub 'arn:aws:secretsmanager:*:${AWS::AccountId}:secret:*'
          -
            Effect: Allow
            Action:
              - 'secretsmanager:ListSecrets'
            Resource: '*'
      Roles:
        - !Ref MGNExeServerRole
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "ListSecrets does not support resource-level permissions"
          - id: W13
            reason: "ListSecrets does not support resource-level permissions"
          - id: W28
            reason: "Replacement of this resource is not required, and explicit name of this resource is easy for user to identify"

  MGNExeServerInsProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub ${Application}-${Environment}-MGN-ExeServer-profile
      Roles:
        - !Ref MGNExeServerRole

  LambdaFunctionMGN:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          application: !Sub ${Application}
          environment: !Sub ${Environment}
          AnonymousUsageData: !Ref AnonymousUsageData
          solutionUUID: !Ref solutionUUID
          solution_identifier: "\"AwsSolution/%%SOLUTION_ID%%/%%VERSION%%\""
          region: !Ref "AWS::Region"
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Join ["/", [!Ref KeyPrefix, "lambda_mgn.zip"]]
      Description: This is the lambda function for application migration service intergration
      FunctionName: !Sub ${Application}-${Environment}-MGN
      Handler: "lambda_mgn.lambda_handler"
      Role: !GetAtt MGNLambdaRole.Arn
      Runtime: python3.7
      MemorySize: 2048
      Timeout: 720
      Tags:
        -
          Key: application
          Value: !Ref Application
        -
          Key: environment
          Value: !Ref Environment
        -
          Key: Name
          Value: !Sub ${Application}-${Environment}-MGN
      ReservedConcurrentExecutions: 10
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Deploy in AWS managed environment provides more flexibility for this solution"

  LambdaPermissionMGN:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LambdaFunctionMGN.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ToolsAPI}/*"

  ServiceAccount:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_service_account.lambda_handler
      Runtime: python3.7
      FunctionName: !Sub ${Application}-${Environment}-service-account
      Timeout: 120
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Join ["/", [!Ref KeyPrefix, "lambda_service_account.zip"]]
      Role: !GetAtt ServiceAccountLambdaRole.Arn
      Environment:
        Variables:
          ServiceAccountEmail: !Ref ServiceAccountEmail
          UserPoolId: !Ref CognitoUserPool
          CognitoGroupName: !Ref CognitoAdminGroup
      Tags:
        -
          Key: application
          Value: !Ref Application
        -
          Key: environment
          Value: !Ref Environment
        -
          Key: Name
          Value: !Sub ${Application}-${Environment}-service-account
      ReservedConcurrentExecutions: 5
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Deploy in AWS managed environment provides more flexibility for this solution"

  ServiceAccountCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt ServiceAccount.Arn

  ServiceAccountLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Application}-${Environment}-serviceaccount-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        -
          PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              -
                Effect: Allow
                Action:
                  - 'cognito-idp:Describe*'
                  - 'cognito-idp:Admin*'
                  - 'cognito-idp:List*'
                  - 'cognito-idp:Get*'
                Resource:
                  - !Ref CognitoUserPoolArn
              -
                Effect: Allow
                Action:
                  - 'secretsmanager:CreateSecret'
                Resource: !Sub "arn:aws:secretsmanager:*:${AWS::AccountId}:secret:*"
              -
                Effect: Allow
                Action:
                  - 'secretsmanager:GetRandomPassword'
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - s3:HeadBucket
                  - s3:HeadObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${CodeBucket}"
              -
                Effect: Allow
                Action:
                  - s3:HeadBucket
                  - s3:HeadObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${CodeBucket}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The resources ARN is unknown, because it is based on user's input"
          - id: W28
            reason: "Replacement of this resource is not required, and explicit name of this resource is easy for user to identify"

Outputs:
    ExecutionServerIAMRole:
      Description: 'Migration Execution Server IAM Role'
      Value: !Ref MGNExeServerRole
    ExecutionServerIAMPolicy:
      Description: 'Migration Execution Server IAM Policy'
      Value: !Select [1, !Split ["policy/", !Ref MGNExeServerPolicy]]
